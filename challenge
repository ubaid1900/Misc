//jshint esnext:true
const players = [
    {
        name: 'Bob', tiles:
            [
                { terrain: 'A', cost: 1 },
                { terrain: 'B', cost: 2 },
                { terrain: 'C', cost: 4 },
            ]
    },
    {
        name: 'Tim', tiles:
            [
                { terrain: 'A', cost: 3 },
                { terrain: 'B', cost: 5 },
                { terrain: 'C', cost: 1 },
            ]
    }
];
// $BA
// C*B
// AA@
const map = ['$BA', 'C*B', 'AA@'];
const totalHops = map[0].length - 1 + map.length - 1;
// console.log(totalHops);
const allPaths = getAllPaths();
const costs = calculateCosts(allPaths);
const lowestCost = costs.sort((a, b) => a.totalCost < b.totalCost)[0].totalCost;
const winners = costs.filter(m => m.totalCost === lowestCost);
console.log(`The ${winners.length === 1 ? 'WINNER is' : 'WINNERS are'}:  ${JSON.stringify(winners)}`);

function calculateCosts(paths) {
    const playerCosts = [];
    for (let playerIndex = 0; playerIndex < players.length; playerIndex++) {
        const player = players[playerIndex];
        for (let pathIndex = 0; pathIndex < paths.length; pathIndex++) {
            const path = paths[pathIndex];
            const playerCost = { name: player.name, totalCost: 0, path: path.path };
            for (let i = 0; i < path.path.length; i++) {
                const char = path.path[i];
                if (char === '$') {
                    continue;
                }
                if (char === '@') {
                    playerCost.totalCost++;
                    continue;
                }
                playerCost.totalCost += player.tiles.find(f => f.terrain === char).cost;
            }
            playerCosts.push(playerCost);
        }
    }
    return playerCosts;
}

function generateNext(node) {
    const height = map.length;
    const width = map[0].length;
    //   console.log(height, width);

    // console.log(node.h, node.v);
    const right = { h: node.h + 1, v: node.v };
    const left = { h: node.h - 1, v: node.v };
    const up = { h: node.h, v: node.v - 1 };
    const down = { h: node.h, v: node.v + 1 };

    //   console.log([right, left, up, down]);
    const validNodes = [right, left, up, down].filter(f => f.h > -1 && f.v > -1 && f.h < width && f.v < height);
    return validNodes;
}

function getAllPaths() {
    let start = { h: -1, v: -1 };
    let end = { h: -1, v: -1 };
    for (let i = 0; i < map.length; i++) {
        if (map[i].indexOf('$') > -1) {
            start.v = i;
            start.h = map[i].indexOf('$');
        }
    }
    for (let i = 0; i < map.length; i++) {
        if (map[i].indexOf('@') > -1) {
            end.v = i;
            end.h = map[i].indexOf('@');
        }
    }
    if (start.h < 0 || start.v < 0) {
        // THROW?;
        console.log('unable to find a starting position');
        return;
    }
    //     console.log(start);
    //     console.log(end);

    let paths = [];
    paths.push({ path: '$', visitedNodes: [start], pathCoordinates: [start] });
    // $BA
    // C*B
    // AA@

    while (paths[paths.length - 1].path.length <= totalHops) {
        const prevRelevantPaths = paths.filter(f => f.path.length === paths[paths.length - 1].path.length);
        for (let i = 0; i < prevRelevantPaths.length; i++) {
            const element = prevRelevantPaths[i];
            let nextNodes = generateNext(element.pathCoordinates[element.pathCoordinates.length - 1]);
            for (let j = 0; j < nextNodes.length; j++) {
                if (paths.find(p => p.path === element.path)
                    .visitedNodes.find(v => v.h === nextNodes[j].h && v.v === nextNodes[j].v)) {
                    continue;
                }
                if (map[nextNodes[j].h][nextNodes[j].v] === '*') {
                    continue;
                }

                var path = {
                    path: element.path + map[nextNodes[j].h][nextNodes[j].v],
                    visitedNodes: [...element.visitedNodes, nextNodes[j]],
                    pathCoordinates: [...element.pathCoordinates, nextNodes[j]
                    ]
                };
                paths.push(path);
            }
        }
    }
    paths = paths.filter(f => f.path.length > totalHops);
    console.log(JSON.stringify(paths));
    return paths;
}
// $BA
// C*B
// AA@
